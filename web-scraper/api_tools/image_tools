from PIL import Image
import numpy as np


def binarize(img):
    """
    convert raw image to binary
    """

  #initialize threshold
  thresh=128
  #convert image to greyscale
  img=img.convert('L') 
  width,height=img.size

  #traverse through pixels 
  for x in range(width):
    for y in range(height):

      #if intensity less than threshold, assign white
      if img.getpixel((x,y)) < thresh:
        img.putpixel((x,y),0)

      #if intensity greater than threshold, assign black 
      else:
        img.putpixel((x,y),255)

  return img


#convert to list of ints
def binary_list_to_int(lst):

    out = int(bin(int(''.join(map(str, lst)), 2) << 1),2)
    return out



def reverse_bits(lst):
    """
    flip bits (used for last 4 anodes
    """

    out = [(i*-1) + 1 for i in lst]
    return out



def return_binary_image(file)

    
    image = Image.open(file)
    image = image.resize((100,100)) #simple resizing for now
    
    image=binarize(image)
    
    image = image.rotate(90)
    image = image.transpose(Image.Transpose.FLIP_LEFT_RIGHT) 
    img_out = np.asarray(image)

    img_out = (img_out*(1/255)).astype(int)
    #img_out = img_out[:,:,0]
    img_out = img_out.tolist()


    #first split each row into 32 bit words
    #repeat first word 8 times to make it 32 bits
    display_image = [[ reverse_bits(8*row[99:95:-1]), row[95:63:-1], row[63:31:-1],row[31::-1]] for row in img_out]

    #then to int
    display_image = [[binary_list_to_int(word) for word in row] for row in display_image]


    
    
